CReate database MUSIC_STORE;
use MUSIC_STORE;

 -- THE SENIOR MOST EMPLOYEE BASED ON JOB TITLE
 SELECT * FROM EMPLOYEES
 ORDER BY LEVELS DESC
 LIMIT 1;
 
 -- COUNTRIES THAT HAVE THE MOST INVOICES
 
 SELECT COUNT(*) AS C, BILLING_COUNTRY FROM INVOICE
 GROUP BY BILLING_COUNTRY
 ORDER BY C DESC;
 
 
 -- TOP 3 VALUES OF  TOTAL INVOICE
 
 SELECT TOTAL FROM INVOICE
 ORDER BY TOTAL DESC
 LIMIT 3;
 

 -- WHICH CITY HAS THE BEST CUSTOMERS? WE WOULD LIKE TO THROW A PROMOTIONAL MUSIC FESTIVAL IN THE CITY WE MADE THE MOST MONEY. WRITE A QUERY
 # THAT RETURNS ONE CITY THAT HAS THE HIGHEST SUM OF INVOICEC TOTALS. RETURN BOTH THE CITY NAME & SUM OF ALL INVOICE TOTALS.
 
 SELECT SUM(TOTAL) AS INVOICE_TOTAL, BILLING_CITY 
 FROM INVOICE
 GROUP BY BILLING_CITY
 ORDER BY INVOICE_TOTAL DESC;
 
 
 -- WHO IS THE BEST CUSTOMER? THE CUSTOMER WHO HAS SPENT THE MOST MONEY WILL BE DECLARE THE BEST CUSTOMER. 
 -- WRITE A QUERY THAT RETURNS THE PERSON WHO HAS SPENT THE MOST MONEY
 
 SELECT * FROM CUSTOMER;
 SELECT CUSTOMER.CUSTOMER_ID, CUSTOMER.FIRST_NAME, CUSTOMER.LAST_NAME,  SUM(INVOICE.TOTAL) AS total_spent
FROM CUSTOMER
INNER JOIN INVOICE ON CUSTOMER.CUSTOMER_ID = INVOICE.CUSTOMER_ID
GROUP BY CUSTOMER.CUSTOMER_ID, CUSTOMER.FIRST_NAME, CUSTOMER.LAST_NAME
ORDER BY total_spent DESC
LIMIT 1;
 
 
-- WRITE QUERY TO RETURN THE EMAIL, FIRST NAME, LAST NAME, & GENRE OF GENRE OF ALL ROCK MUSIC LISTENERS. RETURN YOUR LIST ORDERED ALPHABETICALLY
-- BY EMAIL STARTING WITH A.

SELECT DISTINCT EMAIL, FIRST_NAME, LAST_NAME
FROM CUSTOMER
JOIN invoice on CUSTOMER.customer_id = invoice.customer_id
join invoice_line on invoice.invoice_id = invoice_line.invoice_id
where track_id IN(
		SELECT track_id from track
        join genre on track.genre_id = genre.genre_id
        where genre.name like 'ROCK')
order by EMAIL;


-- LET'S INVITE THE ARTIST WHO HAVE WRITTEN THE MOST ROCK MUSIC IN OUR DATASET. 
-- WRITE A QUERY THAT RETURNS THE ARTIST NAME AND TOTAL TRACK COUNT OF THE TOP 10 ROCK BANDS

SELECT ARTIST.NAME, artist.artist_ID, count(ARTIST.ARTIST_ID) AS NUMBER_OF_SONGS 
FROM TRACK
JOIN ALBUM2 ON ALBUM2.ALBUM_ID = TRACK.ALBUM_ID
JOIN ARTIST ON ARTIST.ARTIST_ID = ALBUM2.ARTIST_ID
JOIN GENRE ON GENRE.GENRE_ID = TRACK.GENRE_ID
where GENRE.NAME LIKE 'ROCK'
GROUP BY ARTIST.NAME, artist.artist_ID
ORDER BY NUMBER_OF_SONGS DESC
LIMIT 10;

-- SELECT * FROM ALBUM2;


-- RETURN ALL THE TRACK NAMES THAT HAVE A SONG LENGTH LONGER THAN THE AVERAGE SONG LENGTH. RETURN THE NAME AND MILLISECONDS
-- FOR EACH TRACK. ORDER BY THE SONG LENGTH WITH  THE LONGEST SONGS LISTED FIRST

SELECT NAME, MILLISECONDS
FROM TRACK
WHERE MILLISECONDS > (
		SELECT AVG(MILLISECONDS) AS AVG_TRACK_LENGTH
        FROM TRACK)
ORDER BY MILLISECONDS DESC;


-- FIND HOW MUCH AMOUNT SPENT BY EACH CUSTOMER ON ARTISTS? WRITE A QUERY TO RETURN CUSTOMER NAME, ARTIST NAME AND TOTAL SPENT
SELECT 
    C.CUSTOMER_ID, 
    C.FIRST_NAME, 
    C.LAST_NAME, 
    ARTIST.NAME AS ARTIST_NAME,
    SUM(IL.UNIT_PRICE * IL.QUANTITY) AS AMOUNT_SPENT
FROM 
    INVOICE I
    JOIN CUSTOMER C ON C.CUSTOMER_ID = I.CUSTOMER_ID
    JOIN INVOICE_LINE IL ON IL.INVOICE_ID = I.INVOICE_ID
    JOIN TRACK T ON T.TRACK_ID = IL.TRACK_ID
    JOIN ALBUM2 ALB ON ALB.ALBUM_ID = T.ALBUM_ID
    JOIN (
        SELECT 
            A.ARTIST_ID,
            A.NAME,
            SUM(IL.UNIT_PRICE * IL.QUANTITY) AS TOTAL_SALES
        FROM 
            INVOICE_LINE IL
            JOIN TRACK T ON T.TRACK_ID = IL.TRACK_ID
            JOIN ALBUM2 ALB ON ALB.ALBUM_ID = T.ALBUM_ID
            JOIN ARTIST A ON A.ARTIST_ID = ALB.ARTIST_ID
        GROUP BY A.ARTIST_ID, A.NAME
        ORDER BY TOTAL_SALES DESC
        LIMIT 1
    ) AS ARTIST ON ARTIST.ARTIST_ID = ALB.ARTIST_ID
GROUP BY 1, 2, 3, 4
ORDER BY 5 DESC;


/* WE WANT TO FIND OUT THE MOST POPULAR MUSIC GENRE FOR EACH COUNTRY. WE DETERMINE THE MOST POPULAR GENRE AS THE GENRE WITH  THE HIGHEST
AMOUNT OF PURCHASES. WRITE A QUERY THAT RETURNS EACH COUNTRY ALONG WITH THE TOP GENRE. FOR COUNRIESWHERE THE MAXIMUM NUMBER OF PURCHASES
IS SHARED RETURN ALL GENRES */

With recursive CUSTOMER_WITH_COUNTRY AS (
		SELECT CUSTOMER.CUSTOMER_ID, FIRST_NAME, LAST_NAME, BILLING_COUNTRY, SUM(TOTAL) AS TOTAL_SPENDING
        FROM INVOICE
        JOIN CUSTOMER ON CUSTOMER.CUSTOMER_ID = INVOICE.CUSTOMER_ID
        GROUP BY 1,2,3,4
        ORDER BY 1,5 DESC),
	
    COUNTRY_MAX_SPENDING AS( 
		SELECT BILLING_COUNTRY, max(TOTAL_SPENDING) AS MAX_SPENDING
        FROM CUSTOMER_WITH_COUNTRY
        GROUP BY BILLING_COUNTRY)
        
SELECT CC.BILLING_COUNTRY, CC.TOTAL_SPENDING, CC.FIRST_NAME, CC.LAST_NAME, CC.CUSTOMER_ID
FROM CUSTOMER_WITH_COUNTRY CC
JOIN COUNTRY_MAX_SPENDING MS ON CC.BILLING_COUNTRY = MS.BILLING_COUNTRY
WHERE CC.TOTAL_SPENDING = MS.MAX_SPENDING
ORDER BY 1;
